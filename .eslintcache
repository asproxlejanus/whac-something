[{"/home/tiago/Dev/whac-a-mole/src/components/App.js":"1","/home/tiago/Dev/whac-a-mole/src/components/game/index.js":"2"},{"size":395,"mtime":1606602077826,"results":"3","hashOfConfig":"4"},{"size":7607,"mtime":1606608586170,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"umg5c2",{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/home/tiago/Dev/whac-a-mole/src/components/App.js",[],"/home/tiago/Dev/whac-a-mole/src/components/game/index.js",["11","12","13"],"import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ScreenBreakPoints = {\n  mobile: 720,\n  desktop: 1024,\n};\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst GameContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  min-height: 80vh;\n  max-width: 600px;\n  max-height: 600px;\n  border: 1px solid gainsboro;\n  border-radius: 5px;\n  margin: auto;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);\n`;\n\nconst GameHeader = styled.div`\n  height: 70px;\n  background-color: white;\n  margin: auto;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);\n`;\n\nconst GameDetails = styled.div`\n  width: 90%;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n  > h1 {\n    width: 100%;\n    text-align: center;\n    margin: 5px;\n  }\n  > .match-details {\n    width: 100%;\n    text-align: center;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n\n    > ul {\n      list-style: none;\n      display: flex;\n      margin: 0px;\n\n      > li {\n        margin: 0px 10px;\n      }\n    }\n  }\n`;\n\nconst GameSettings = styled.div`\n  width: 40px;\n  height: 40px;\n  border-radius: 20px;\n  background-color: white;\n  align-self: center;\n  font-size: 36px;\n  text-align: center;\n  color: gray;\n`;\n\nconst Mole = styled.div`\n  position: relative;\n  background-color: pink;\n  width: 40px;\n  height: 60px;\n  border-radius: 5px;\n`;\n\nconst ModalContainer = styled.div`\n  background-color: rgba(0, 0, 0, 0.6);\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  z-index: 10;\n`;\n\nconst GameModal = styled.div`\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  left: 0px;\n  right: 0px;\n  margin: auto;\n  max-width: 350px;\n  max-height: 300px;\n  min-width: 230px;\n  min-height: 130px;\n  display: fleX;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  align-content: center;\n  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);\n  background-color: white;\n  border-radius: 6px;\n\n  > h3 {\n    border-bottom: 1px solid gray;\n    width: 100%;\n    text-align: center;\n    padding: 10px;\n  }\n\n  > span {\n    border: 1px solid green;\n    border-radius: 5px;\n    color: white;\n    background-color: teal;\n    padding: 10px 20px;\n  }\n  > span:hover {\n    transform: scale(1.1);\n    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nconst Button = styled.button``;\n\nconst Game = () => {\n  const [mole, MolePosition] = useState({ x: 0, y: 0 });\n  const [containerDetails, setContainerDetails] = useState({ x: 0, y: 0 });\n  const [timer, setTimer] = useState(30);\n  const [points, setPoints] = useState(0);\n  const [clicks, setClicks] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [settings, showSettings] = useState(false);\n  const [moleSpeed, setMoleSpeed] = useState(600);\n  const [isGamingPlaying, setIsGamePlaying] = useState(false);\n\n  const containerRef = useRef();\n  const moleRef = useRef();\n\n  const setDefaults = () => {\n    MolePosition({ x: 0, y: 0 });\n    setTimer(0);\n    setPoints(0);\n    setClicks(0);\n  };\n\n  useEffect(() => {\n    const gametimer = timer > 0 && setInterval(() => setTimer(timer - 1), 1000);\n    return () => clearInterval(gametimer);\n  }, [timer]);\n\n  useEffect(() => {\n    let x = containerRef.current.clientWidth;\n    let y = containerRef.current.clientHeight;\n    setContainerDetails({ x, y });\n  }, []);\n\n  useEffect(() => {\n    //TO DO Save this molTimeOut id on State, to use it later from return.\n    const moleTimeOut = setTimeout(() => {\n      timer > 0 && setMolePosition();\n    }, moleSpeed);\n\n    timer === 0 && gameEnded();\n\n    return () => {\n      timer > 0 && clearTimeout(moleTimeOut);\n    };\n  }, [mole]);\n\n  const clickPosition = (e) => {\n    if (timer === 0) return;\n    setClicks(clicks + 1);\n    let xClick = e.clientX;\n    let yClick = e.clientY;\n\n    let xMolePosition = moleRef.current.offsetLeft;\n    let yMolePosition = moleRef.current.offsetTop;\n    let moleHeight = moleRef.current.clientHeight;\n    let moleWidth = moleRef.current.clientWidth;\n\n    let onRangeX = xClick < xMolePosition + moleWidth && xClick > xMolePosition;\n    let onRangeY =\n      yClick < yMolePosition + moleHeight && yClick > yMolePosition;\n\n    if (onRangeX && onRangeY) {\n      setPoints(points + 1);\n      setMolePosition();\n    }\n  };\n\n  const setMolePosition = () => {\n    let clientX = containerDetails.x;\n    let clientY = containerDetails.y;\n    let moleHeight = moleRef.current.clientHeight;\n    let moleWidth = moleRef.current.clientWidth;\n\n    let randonNumberX = Math.floor(\n      Math.random() * (clientX - moleWidth - 0) + 0\n    );\n    let randonNumberY = Math.floor(\n      Math.random() * (clientY - moleHeight - 0) + 0\n    );\n    return MolePosition({\n      x: randonNumberX > 0 ? randonNumberX : 0,\n      y: randonNumberY > 0 ? randonNumberY : 0,\n    });\n  };\n\n  const startGame = () => {\n    setDefaults();\n    setTimer(30);\n    setIsGamePlaying(true);\n    setGameOver(false);\n  };\n\n  const gameEnded = () => {\n    setGameOver(true);\n    setIsGamePlaying(false);\n  };\n\n  const startGamePopUp = (\n    <ModalContainer>\n      <GameModal>\n        <h1>Start Playing!</h1>\n        <span onClick={() => startGame()}>Start</span>\n      </GameModal>\n    </ModalContainer>\n  );\n\n  const gameSettings = (\n    <ModalContainer>\n      <GameModal>\n        <h3>Settings</h3>\n        <form className=\"ui form\">\n          <div className=\"field\">\n            <label>Game timer</label>\n            <input\n              type=\"text\"\n              placeholder=\"time in seconds\"\n              value={timer}\n              onChange={(e) => setTimer(e.target.value)}\n            />\n          </div>\n          <br />\n\n          <div className=\"field\">\n            <label>Game speed</label>\n            <input\n              type=\"text\"\n              placeholder=\"time en miliseconds\"\n              value={moleSpeed}\n              onChange={(e) => setMoleSpeed(e.target.value)}\n            />\n          </div>\n        </form>\n        <button className=\"ui teal button\" onClick={() => showSettings(false)}>\n          Save\n        </button>\n      </GameModal>\n    </ModalContainer>\n  );\n  return (\n    <Container>\n      {!isGamingPlaying && !gameOver && startGamePopUp}\n      {settings && gameSettings}\n      <GameHeader>\n        <GameDetails>\n          <h1>\n            <i className=\"clock outline icon\"></i>\n            {timer}\n          </h1>\n          <div className=\"match-details\">\n            <ul>\n              <li>\n                <i class=\"trophy icon\"></i>\n                Points: {points}\n              </li>\n              <li>\n                <i className=\"flag checkered icon\"></i>\n                Clicks: {clicks}\n              </li>\n              <li>\n                <i class=\"bullseye icon\"></i>Accuracy:\n                {Math.round((points * 100) / clicks)\n                  ? Math.round((points * 100) / clicks)\n                  : \"0\"}\n                %\n              </li>\n            </ul>\n          </div>\n        </GameDetails>\n        <GameSettings onClick={() => showSettings(!settings)}>\n          <h5 className=\"ui header\">\n            <i className=\"settings icon\"></i>\n          </h5>\n        </GameSettings>\n      </GameHeader>\n      <GameContainer\n        ref={containerRef}\n        onClick={(e) => clickPosition(e)}\n        clientHeight={containerDetails.y}\n        clientWidth={containerDetails.x}\n      >\n        <Mole style={{ top: mole.y, left: mole.x }} ref={moleRef} />\n      </GameContainer>\n    </Container>\n  );\n};\n\nexport default Game;\n",{"ruleId":"14","severity":1,"message":"15","line":4,"column":7,"nodeType":"16","messageId":"17","endLine":4,"endColumn":24},{"ruleId":"14","severity":1,"message":"18","line":135,"column":7,"nodeType":"16","messageId":"17","endLine":135,"endColumn":13},{"ruleId":"19","severity":1,"message":"20","line":180,"column":6,"nodeType":"21","endLine":180,"endColumn":12,"suggestions":"22"},"no-unused-vars","'ScreenBreakPoints' is assigned a value but never used.","Identifier","unusedVar","'Button' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'moleSpeed', 'setMolePosition', and 'timer'. Either include them or remove the dependency array.","ArrayExpression",["23"],{"desc":"24","fix":"25"},"Update the dependencies array to be: [mole, moleSpeed, setMolePosition, timer]",{"range":"26","text":"27"},[3754,3760],"[mole, moleSpeed, setMolePosition, timer]"]